%% Title Block
%Purpose of code: To determine the E field norm from a differential
%patch on the reflector.
%All equations reference antenna theory and design, stuzmann, third edition

clc;
clear;
close all;

%% Variables
f = 4e9; %Hz
c = 3e8; %m/s
lambda = c/f; %m
k = 2*pi/lambda; %rad/m
D = 12; %m
F = 0.6*D; %m
epsilon = 8.85418782e-12; %F/m
mu = (4*pi)*(10^-7); %H/m
eta = sqrt(mu/epsilon); %ohms
omega = 2*pi*f; %rad/m, radial frequency
field_angle = 2*pi/180; %rad, angle observered from the primary axis of parabolic antenna
d_rho_f = lambda/10; %m, differential distance along x_f axis in incremenets of lambda/10 m
d_phi_f = (pi/180)/1; %rad, differential angle along phi_f direction in incremenets of 1/100th of a degree
y_hat = [0 1 0]; %unit vector in cartisean coordinates
y_h = y_hat;%unit vector in cartisean coordinates
x_h = [1 0 0];%unit vector in cartisean coordinates
z_h = [0 0 1];
l_e_h = [0 1 0]; %unit vector for the electric dipole
l_h_h = [-1 0 0]; %unit vector for the magnetic dipole
b = 0.8;
a = 1;
beta = 0;
alpha = 0;

%% Analysis 1: Generating Lookup Table
g = 1;

theta = -field_angle;

x_p = zeros(1, length(0:d_phi_f:2*pi)*length(0:d_rho_f:D/2)*length(-field_angle:d_phi_f/10:field_angle));
y_p = zeros(1, length(0:d_phi_f:2*pi)*length(0:d_rho_f:D/2)*length(-field_angle:d_phi_f/10:field_angle));
z_p = zeros(1, length(0:d_phi_f:2*pi)*length(0:d_rho_f:D/2)*length(-field_angle:d_phi_f/10:field_angle));

x_f = zeros(1, length(0:d_phi_f:2*pi)*length(0:d_rho_f:D/2)*length(-field_angle:d_phi_f/10:field_angle));
y_f = zeros(1, length(0:d_phi_f:2*pi)*length(0:d_rho_f:D/2)*length(-field_angle:d_phi_f/10:field_angle));
z_f = zeros(1, length(0:d_phi_f:2*pi)*length(0:d_rho_f:D/2)*length(-field_angle:d_phi_f/10:field_angle));

x_ps = zeros(1, length(0:d_phi_f:2*pi)*length(0:d_rho_f:D/2)*length(-field_angle:d_phi_f/10:field_angle));
y_ps = zeros(1, length(0:d_phi_f:2*pi)*length(0:d_rho_f:D/2)*length(-field_angle:d_phi_f/10:field_angle));
z_ps = zeros(1, length(0:d_phi_f:2*pi)*length(0:d_rho_f:D/2)*length(-field_angle:d_phi_f/10:field_angle));


while(theta <= field_angle)
    
    E_point = zeros(length(-field_angle:d_rho_f*d_phi_f^2:field_angle),3); %initializing the point on the reflector
    
    phi_f = 0;     %rad, starting phi_f angle
    
    while(phi_f<=2*pi) %rad, iterating from phi_f = 0 to phi = 2*pi
        
        rho = 0; %m, projection of the radial distance onto the aperture plane
        
        while(rho<=D/2) %integrating from the vertix to the rim of the reflector
            theta_f = -2*atan(rho/(2*F)); %rad, angular distance in the feed fixed coordinate system. The negative sign accounts for the conversion from feed-fixed to global coordinates
            phi_f = -phi_f; %rad, phi_f is -phi in the global coordinate system
            s_i = F*sec(theta_f/2)^2; %m, distance from feed to reflector, Eqn 9-183 in Stuzmann          
            z_f(g) = -s_i*cos(theta_f); %m, z corrdinate in global coordinate system
            s_i_v = [rho*cos(phi_f) rho*sin(phi_f) z_f]; %m, vector
            x_f(g) = s_i_v(1);
            y_f(g) = s_i_v(2);
            f_sr = sqrt(a^2-b^2);
            y_1 = -f_sr*sin(beta);
            f_c = F;
            z_1 = f_c-f_sr*cos(beta);
            if(z_1 == 0)
                beta_ec = pi/2;
            else
                beta_ec = atan(-y_1/z_1);
            end
            beta_e = beta_ec + beta;
            r_0 = sqrt(y_1^2+z_1^2);
            y_e1 = r_0*sin(beta_e);
            z_e1 = -r_0*cos(beta_e);
            sub_conv = transpose([1 0 0;0 cos(beta) -sin(beta); 0 sin(beta) cos(beta)]...
                *transpose([x_f(g) y_f(g) z_f(g)]) + transpose([0 y_e1 z_e1]));
            x_ps(g) = sub_conv(1);
            y_ps(g) = sub_conv(2);
            z_ps(g) = sub_conv(3);
            
            r_ms = sqrt(x_ps(g)^2 + y_ps(g)^2 + (f_sr-z_ps(g))^2);
            r_1 = -x_ps(g)/r_ms;
            r_2 = -y_ps(g)/r_ms;
            r_3 = (f_sr-z_ps(g))/r_ms;
            if(r_1 ~=0)
                v_r = atan(r_2/r_1);
            elseif(r_1 == 0 && r_2 > 0)
                v_r = pi/2;
            elseif(r_1 == 0 && r_2 <=0)
                v_r = -pi/2;
            end    
            if(r_2 ~= 0)
                d_sr = b*(r_3/r_2)*sin(v_r);
            else
                d_sr = b*(r_3/r_1)*cos(v_r);
            end
            num1 = a*sqrt(d_sr^2 + b^2)-f_sr*d_sr;
            den1 = a^2 + d_sr^2;
            u_r = asin(num1/den1);
            P_r = [b*sin(u_r)*cos(v_r) b*sin(u_r)*sin(v_r) a*cos(u_r)];
            back_conv = transpose([1 0 0; 0 cos(alpha) sin(alpha);0 -sin(alpha) cos(alpha)]*...
                transpose(P_r)+transpose([0 f_sr*sin(alpha) f_sr*cos(alpha)]));
            
            x_p(g) = back_conv(1);
            y_p(g) = back_conv(2);
            z_p(g) = back_conv(3);
            
            rho = rho + d_rho_f; %m, incrementing by the differential
            g = g + 1;    %incremeneting the array index

        end
        phi_f = phi_f +  d_phi_f; %incrementating the observation angle (theta) by a 10th of a degree
    end
    theta = theta + d_phi_f/10; %rad, incrementating the observation angle (theta) by a 100th of a degree
end


%% Analysis 2: Determining the scattered E field from the main reflector

E_s_mag = zeros(1, length(-field_angle:d_phi_f/10:field_angle)); %initializing the scattered E field as a function of theta
g = 1;
m = 1; %counter for array
main_p = transpose([x_f; y_f; z_f]);
sub_p = transpose([x_p; y_p; z_p]);
theta = -field_angle; %rad, angle from reflector axis (referencing global coordinate system)
while(theta <= field_angle)
    
    E_field = [0 0 0];  %V/m, initializing scattered E field for this computiation
    
    phi_f = 0;     %rad, starting phi_f angle
    
    %the following two while loops are the numerical integrator to solve
    %for the scattered E field at a point
    while(phi_f<=2*pi) %rad, iterating from phi_f = 0 to phi = 2*pi
        
        rho = 0; %m, projection of the radial distance onto the aperture plane
        
        while(rho<=D/2) %integrating from the vertix to the rim of the reflector
            theta_f = -2*atan(rho/(2*F)); %rad, angular distance in the feed fixed coordinate system. The negative sign accounts for the conversion from feed-fixed to global coordinates
            phi_f = -phi_f; %rad, phi_f is -phi in the global coordinate system
            z_f(m) = -s_i*cos(theta_f); %m, z corrdinate in global coordinate system

            s_i_v = main_p(m,:)-sub_p(m,:); 
            s_i = norm(s_i_v);
            s_i_h = s_i_v/s_i;
            %s_i = s_i+norm(sub_p(m,:));
            r_f_h = [sin(theta_f)*cos(phi_f) sin(theta_f)*sin(phi_f) cos(theta_f)]; %r_hat to cartisean
            theta_f_h = [cos(theta_f)*cos(phi_f) cos(theta_f)*sin(phi_f) -sin(theta_f)]; %theta_hat to cartisean
            phi_f_h = [-sin(phi_f) cos(phi_f) 0];
            n_h = -cos(theta_f/2)*r_f_h + sin(theta_f/2)*theta_f_h; %normal vector in the global coordinate system (pointing towards the feed, equation 9-188 in Stuzman
            
            d_a = sqrt(4*F^2+rho^2)/(2*F)*...
                rho*d_phi_f*d_rho_f; %m, differential surface are of the parabolic 16-165 in Stutzman
            e_i_h = ...
                theta_f_h*sin(phi_f)*(cos(theta_f/2)^2) + ...
                phi_f_h*cos(phi_f)*(cos(theta_f/2)^2);
            R_f = sqrt(x_p(m)^2 + y_p(m)^2 + z_p(m)^2);
            E_i = e_i_h*exp(-j*k*R_f)/R_f;
            E_r = (-E_i + 2*dot(n_h,E_i)*n_h)*exp(-j*k*s_i);
            %E_i = 0.5*(cross(cross(l_e_h, s_i_h), s_i_h)+cross(l_h_h, s_i_h))*exp(-j*beta*s_i)/s_i;
            
            %E_r = 2*dot(n_h,E_i)*n_h-E_i;
                        
            H_r  =  cross((1/eta)*s_i_h, E_r); %A/m, magnetic field normalized using plane wave relationship
            
            J = 2*cross(n_h, H_r); %A/m, equivalent surface current density accross surface of parabolic
            
            phi = -phi_f;%rad, phi_f is -phi in the global coordinate system
            r_hat = [sin(theta)*cos(phi) sin(theta)*sin(phi) cos(theta)]; %r_hat to cartisean in the global coordinate system
            phase = k*dot(r_hat, s_i_v);%m, phase incurred by far-field approximation dot product in Equation 1 in AWPL
            
            integrand = -j*J*omega*mu*...
                exp(j*phase)*...
                (1/(4*pi))*d_a; %V/m, integrand in calculating the scattered e field
            
            if(isnan(integrand))
                integrand = 0;
            end
            
            E_field = E_field + integrand; %V/m, adding the infantesimal sum of the scattered e field
            
            rho = rho + d_rho_f; %m, incrementing by the differential
            m = m + 1;
        end
        phi_f = abs(phi_f); %rad, taking the absolute value of the angle for looping
        phi_f = phi_f +  d_phi_f; %incrementating the observation angle (theta) by a 10th of a degree
    end
    E_s_mag(g) = norm(E_field); %V/m, magnitude of the E field
    theta = theta + d_phi_f/10; %rad, incrementating the observation angle (theta) by a 100th of a degree
    g = g + 1;    %incremeneting the array index
end

E_s_squarred = abs(E_s_mag).^2; %magntiude of the scattered e field squarred

%% Analysis 3: Calculating beam solid angle
% %Used in the gain pattern for recreating figure 3
theta = 0; %initializing thetas angle
b_S_A = 0; %initializing beam solid angle sum
d_phi = d_phi_f; %rad, differential angle used in integration
d_theta = d_phi; %rad, differential angle used in integration
l_e_h = [0 0 1]; %unit vector for the electric dipole
l_h_h = [1 0 0]; %unit vector for the magnetic dipole
while(theta<=pi/2)
    phi =0;
    while(phi<=2*pi)
        s_i_h = [sin(theta)*cos(phi) sin(theta)*sin(phi) cos(theta)]; %radial unit vector from the center of the dipoles to the field point
        F = 0.5*norm(cross(cross(l_e_h, s_i_h), s_i_h)+cross(l_h_h, s_i_h));%normalized pattern function of the two dipoles
        b_S_A = b_S_A+(abs(F)^2)*sin(theta)*d_theta*d_phi; %mupltiplying by differential aray, sin(theta)*d_theta*d_phi
        phi = phi + d_phi; %incrementing phi by  1/100th of a degree
    end
    theta = theta + d_theta; %incrementing theta by  1/100th of a degree
end
solid_angle = b_S_A; %sr
norm_E = (solid_angle/(4*pi)); %magnitude of E (divided by the source current) from feed squarred multiplied by the beam solid angle and divided by 4*pi

%% Plotting
angle_rim = (-field_angle:d_phi_f/10:field_angle); %rad, used in plotting the horizontal axis of the gain plot
D_dBi = 10*log10(E_s_squarred/norm_E); %power pattern of antenna
figure;plot(angle_rim*180/pi,D_dBi);hold all;xlabel('\theta [deg]');xlim([-field_angle*180/pi field_angle*180/pi]); %2 degree range on horizontal axis
%figure;plot(D_dBi);hold all;
ylabel('Co-polairzed Pattern [dBi]');title('1.8m Results with GOAI');grid on;
